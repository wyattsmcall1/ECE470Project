// Generated by gencpp from file rhino_ros/positions.msg
// DO NOT EDIT!


#ifndef RHINO_ROS_MESSAGE_POSITIONS_H
#define RHINO_ROS_MESSAGE_POSITIONS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rhino_ros
{
template <class ContainerAllocator>
struct positions_
{
  typedef positions_<ContainerAllocator> Type;

  positions_()
    : position()
    , grip(0)
    , at_position(0)  {
      position.assign(0);
  }
  positions_(const ContainerAllocator& _alloc)
    : position()
    , grip(0)
    , at_position(0)  {
      position.assign(0);
  }



   typedef boost::array<int32_t, 8>  _position_type;
  _position_type position;

   typedef int32_t _grip_type;
  _grip_type grip;

   typedef int32_t _at_position_type;
  _at_position_type at_position;




  typedef boost::shared_ptr< ::rhino_ros::positions_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rhino_ros::positions_<ContainerAllocator> const> ConstPtr;

}; // struct positions_

typedef ::rhino_ros::positions_<std::allocator<void> > positions;

typedef boost::shared_ptr< ::rhino_ros::positions > positionsPtr;
typedef boost::shared_ptr< ::rhino_ros::positions const> positionsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rhino_ros::positions_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rhino_ros::positions_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rhino_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rhino_ros': ['/home/youbot/catkin_ws/src/rhino_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rhino_ros::positions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rhino_ros::positions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rhino_ros::positions_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rhino_ros::positions_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rhino_ros::positions_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rhino_ros::positions_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rhino_ros::positions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "effceaa6d21d3d376be41978245bcf8f";
  }

  static const char* value(const ::rhino_ros::positions_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeffceaa6d21d3d37ULL;
  static const uint64_t static_value2 = 0x6be41978245bcf8fULL;
};

template<class ContainerAllocator>
struct DataType< ::rhino_ros::positions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rhino_ros/positions";
  }

  static const char* value(const ::rhino_ros::positions_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rhino_ros::positions_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[8] position\n\
int32 grip\n\
int32 at_position\n\
";
  }

  static const char* value(const ::rhino_ros::positions_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rhino_ros::positions_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.grip);
      stream.next(m.at_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct positions_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rhino_ros::positions_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rhino_ros::positions_<ContainerAllocator>& v)
  {
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.position[i]);
    }
    s << indent << "grip: ";
    Printer<int32_t>::stream(s, indent + "  ", v.grip);
    s << indent << "at_position: ";
    Printer<int32_t>::stream(s, indent + "  ", v.at_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // RHINO_ROS_MESSAGE_POSITIONS_H
